require 'rake'
require 'fileutils'

task :install => [:submodule_init, :submodules] do
  run %{ pip3 install --user pynvim  }
  install_homebrew if RUBY_PLATFORM.downcase.include?("darwin")
  Rake::Task["install_plug"].execute
  # Rake::Task["install_fisher"].execute
  Rake::Task["install_fisher_plugins"].execute

  run %{/usr/local/opt/fzf/install}
end

task :submodule_init do
  unless ENV["SKIP_SUBMODULES"]
    run %{ git submodule update --init --recursive }
  end
end

desc "Init and update submodules."
task :submodules do
  unless ENV["SKIP_SUBMODULES"]
    puts "======================================================"
    puts "Downloading submodules...please wait"
    puts "======================================================"

    run %{
      git submodule update --recursive
      git clean -df
    }
    puts
  end
end

desc "Runs Plug installer in a clean vim environment"
task :install_plug do
  puts "======================================================"
  puts "Installing and updating plugs."
  puts "The installer will now proceed to run PlugInstall."
  puts "======================================================"

  puts ""

  run %{ curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim }
  system "vim --noplugin -u .vim/bundle.vim -N \"+set hidden\" \"+syntax on\" +PlugClean +PlugInstall +qall"
end

task :install_fisher do
  run %{fish; fisher}
  unless $?.success?
    run %{
      fish
      curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher
    }
  end
end

task :install_fisher_plugins do
  run %{
    fish
    fisher install pure-fish/pure
    fisher install jethrokuan/z
    fisher install PatrickF1/fzf.fish
    fisher install orefalo/grc
  }
end

task :default => 'install'

private

def run(cmd)
  puts "[Running] #{cmd}"
  `#{cmd}` unless ENV['DEBUG']
end

def install_homebrew
  run %{which brew}
  unless $?.success?
    puts "======================================================"
    puts "Installing Homebrew, the OSX package manager...If it's"
    puts "already installed, this will do nothing."
    puts "======================================================"
    run %{/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"}
  end

  puts "======================================================"
  puts "Installing Homebrew packages...There may be some warnings."
  puts "======================================================"
  run %{brew bundle}
  puts
  puts
end


def ask(message, values)
  puts message
  while true
    values.each_with_index { |val, idx| puts " #{idx+1}. #{val}" }
    selection = STDIN.gets.chomp
    if (Float(selection)==nil rescue true) || selection.to_i < 0 || selection.to_i > values.size+1
      puts "ERROR: Invalid selection.\n\n"
    else
      break
    end
  end
  selection = selection.to_i-1
  values[selection]
end

def file_operation(files, method = :symlink)
  files.each do |f|
    file = f.split('/').last
    source = "#{ENV["PWD"]}/#{f}"
    target = "#{ENV["HOME"]}/.#{file}"

    puts "======================#{file}=============================="
    puts "Source: #{source}"
    puts "Target: #{target}"

    if file != 'zshrc' && file != 'zpreztorc'
      if File.exists?(target) && (!File.symlink?(target) || (File.symlink?(target) && File.readlink(target) != source))
        puts "[Overwriting] #{target}...leaving original at #{target}.backup..."
        run %{ mv "$HOME/.#{file}" "$HOME/.#{file}.backup" }
      end

      if method == :symlink
        run %{ ln -nfs "#{source}" "#{target}" }
      else
        run %{ cp -f "#{source}" "#{target}" }
      end

      puts "=========================================================="
      puts
    end
  end
end

